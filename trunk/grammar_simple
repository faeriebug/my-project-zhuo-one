<program>¡ú<program-part> | <program><program-part>
<program-part>¡ú<declare-stmt> | <func>
<func>¡ú<func-declare><comp-stmt>
<stmt>¡ú<declare-stmt> | <comp-stmt> | <exp-stmt> | 
		<select-stmt> | <iterate-stmt> | <jump-stmt> 
<declare-stmt>¡ú<declare> ;
<comp-stmt>¡ú{ <stmt-list> }
<stmt-list>¡ú<stmt> | <stmt-list><stmt>
<exp-stmt>¡ú; | <exp> ;
<select-stmt>¡úif ( <exp> ) <stmt> | if ( <exp> ) <stmt> else <stmt>
<iterate-stmt>¡úwhile ( <exp> ) <stmt>
<jump-stmt>¡úcontinue ; | break ; | return ; | return <exp> ;
<declare>¡ú<var> | <func-declare>
<var>¡ú<type><init-list>
<type>¡úint
<init-list>¡ú<init> | <init-list>,<init>
<init>¡úid | id=<assign>
<func-declare>¡ú<type> id ( <param-list> )
<param-list>¡ú<param> | <param-list> , <param>
<param>¡ú<type> id
<factor>¡úid | const |  ( <exp> ) | id ( <arg-exp-list-opt> ) 
<arg-exp-list-opt>¡ú ¦Å | <arg-exp-list>
<arg-exp-list>¡ú <assign> | <arg-exp-list> , <assign>
<mult>¡ú<factor> | <mult> * <factor>  |  <mult> / <factor>
<add>¡ú<mult> | <add> + <mult> | <add> - <mult>
<relation>¡ú<add> | 
		<relation> \< <add> | <relation> \> <add> | 
		<relation> \<= <add> | <relation> \>= <add>
<equal>¡ú<relation> | 
		<equal> == <relation> | <equal> != <relation>
<assign>¡ú<equal> | id = <assign>
<exp>¡ú<assign>

